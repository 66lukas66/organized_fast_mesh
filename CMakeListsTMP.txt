cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)
#set(ROS_BUILD_TYPE Debug)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

add_definitions("-frounding-math")
add_definitions("-std=c++0x")

# set srv and msg generation
rosbuild_genmsg()
rosbuild_gensrv()

#add boost
rosbuild_add_boost_directories()

# add dynamic reconfigure api
rosbuild_find_ros_package(dynamic_reconfigure)
include(${dynamic_reconfigure_PACKAGE_PATH}/cmake/cfgbuild.cmake)
gencfg()

find_package(OpenGL REQUIRED)
if(OpenGL_FOUND)
    link_directories(${OpenGL_LIBRARY_DIRS})
    include_directories(${OpenGL_INCLUDE_DIRS})
endif(OpenGL_FOUND)

find_package(GLUT REQUIRED)

if(UNIX)
    FIND_PATH(OPENGL_INC gl.h /usr/include/GL)
    include_directories(${OPENGL_INC})
endif(UNIX)

find_package(PCL 1.0 REQUIRED)
include_directories(SYSTEM ${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})
add_definitions(-D_USE_PCL_)

find_package(CGAL)
if(CGAL_FOUND)
link_directories(${CGAL_LIBRARY_DIRS})
include_directories(${CGAL_INCLUDE_DIRS})
endif(CGAL_FOUND)

rosbuild_add_library(lvr_ros_converter src/lvr_ros_converter.cpp)

rosbuild_add_executable(lvr_reconstruction_node src/lvr_reconstruction_node.cpp)
rosbuild_link_boost(lvr_reconstruction_node system)
rosbuild_add_openmp_flags(lvr_reconstruction_node)
target_link_libraries(lvr_reconstruction_node lvr_ros_converter lvr pcl_common pcl_kdtree pcl_search pcl_features freenect GLU glut)

rosbuild_add_executable(lvr_fusion_node src/lvr_fusion_node.cpp)
rosbuild_link_boost(lvr_fusion_node system)
target_link_libraries(lvr_fusion_node lvr_ros_converter lvr freenect ${CGAL_LIBRARY} 'gmp')

rosbuild_add_executable(lvr_slicer_node src/lvr_slicer_node.cpp)
rosbuild_link_boost(lvr_slicer_node system)
target_link_libraries(lvr_slicer_node lvr_ros_converter lvr freenect ${CGAL_LIBRARY})

rosbuild_add_executable(lvr_classifier_node src/lvr_classifier_node.cpp)
rosbuild_link_boost(lvr_classifier_node system)
target_link_libraries(lvr_classifier_node lvr_ros_converter lvr)

rosbuild_add_executable(mesh_publisher src/mesh_publisher_node.cpp)
rosbuild_link_boost(mesh_publisher system)
target_link_libraries(mesh_publisher lvr_ros_converter lvr freenect)
